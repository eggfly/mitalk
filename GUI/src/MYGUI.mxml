<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   backgroundColor="#E2E2E2">
	<fx:Script>
		<![CDATA[
			import com.adobe.net.URI;
			import com.adobe.viewsource.ViewSource;
			import com.facebook.graph.Facebook;
			import com.facebook.graph.data.FacebookAuthResponse;
			import com.pixelbreaker.ui.osx.MacMouseWheel;
			import com.yourpalmark.chat.ChatManager;
			import com.yourpalmark.chat.data.ChatRoom;
			import com.yourpalmark.chat.data.LoginCredentials;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import org.httpclient.HttpClient;
			import org.httpclient.events.HttpDataEvent;
			import org.httpclient.events.HttpErrorEvent;
			import org.httpclient.events.HttpResponseEvent;
			import org.httpclient.events.HttpStatusEvent;
			import org.igniterealtime.xiff.collections.events.CollectionEvent;
			import org.igniterealtime.xiff.conference.Room;
			import org.igniterealtime.xiff.core.UnescapedJID;
			import org.igniterealtime.xiff.core.XMPPConnection;
			import org.igniterealtime.xiff.data.Message;
			import org.igniterealtime.xiff.data.Presence;
			import org.igniterealtime.xiff.data.im.RosterGroup;
			import org.igniterealtime.xiff.data.im.RosterItemVO;
			import org.igniterealtime.xiff.events.ConnectionSuccessEvent;
			import org.igniterealtime.xiff.events.DisconnectionEvent;
			import org.igniterealtime.xiff.events.IncomingDataEvent;
			import org.igniterealtime.xiff.events.InviteEvent;
			import org.igniterealtime.xiff.events.LoginEvent;
			import org.igniterealtime.xiff.events.MessageEvent;
			import org.igniterealtime.xiff.events.OutgoingDataEvent;
			import org.igniterealtime.xiff.events.PresenceEvent;
			import org.igniterealtime.xiff.events.RegistrationSuccessEvent;
			import org.igniterealtime.xiff.events.RosterEvent;
			import org.igniterealtime.xiff.events.XIFFErrorEvent;
			
			private var connection:XMPPConnection = new XMPPConnection();
			
			// "<stream:stream to='xiaomi.com' xmlns:stream='xm' xmlns='xm' model='OptiPlex 990' version='102' connpt='wifi' host='58.68.235.232'>"
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// three below are all must
				connection.domain = "xiaomi.com";
				connection.server = "58.68.235.232";
				connection.port = 5222;
				connection.addEventListener(ConnectionSuccessEvent.CONNECT_SUCCESS, onSocketConnected);
				connection.addEventListener(DisconnectionEvent.DISCONNECT, onSocketDisconnected);
				connection.addEventListener(IncomingDataEvent.INCOMING_DATA, onIncomingData);
				connection.addEventListener(OutgoingDataEvent.OUTGOING_DATA, onOutgoingData);
				connection.addEventListener( MessageEvent.MESSAGE, onEvent);
				connection.connect();
			}
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// three below are all must
				// connection.testCalcSignature();
				var client:HttpClient = new HttpClient();
				client.listener.onStatus = function(event:HttpStatusEvent):void{
					trace(event.header);
					trace(event.code);
				}
				client.listener.onError = function(event:HttpErrorEvent):void{
					trace(event);
				}
				client.listener.onComplete = function(event:HttpResponseEvent):void {
					var location:String = "";
					var userId:String = "";
					var passToken:String = "";
					var extensionPragma:String = "";
					const LocationKey:String = "location";
					const UserIdKey:String = "userId";
					const PassTokenKey:String = "passToken";
					const ExtensionParamKey:String = "extension-pragma";
					extensionPragma = event.response.header.getValue(ExtensionParamKey);
					location = event.response.header.getValue(LocationKey);
					var cookies:Array = event.response.header.getValues('Set-Cookie');
					for each(var item:Object in cookies) {
						var vars:Dictionary = parseCookies(item['value']);
						if (vars[UserIdKey]) {
							userId = vars[UserIdKey];
						} else if (vars[PassTokenKey]) {
							passToken = vars[PassTokenKey];
						}
					}
					var extensionObject:Object = JSON.parse(extensionPragma);
					var ssecurity:String = extensionObject['ssecurity'];
					var nonce:int = extensionObject['nonce'];
					var psecurity:String = extensionObject['psecurity'];
					
				}
				var variables:Array = [
					{name:"hash", value:"04AD8D3A37AB114C3EAC9CE1FD4ED097"},
					{name:"sid", value: "miliao"},
					{name:"time", value: "1"},
					{name:"user", value: "10223296"},
				];
				client.postFormData(new URI("https://account.xiaomi.com/pass/serviceLoginAuth"), variables);
			}
			private function parseCookies(header:String): Dictionary {
				var result:Dictionary = new Dictionary();
				var parse:Function = function(item:String, ...args): void {
					item = StringUtil.trim(item);
					var offset:int = item.indexOf("=");
					var key:String = "", value:String = "";
					if (offset == -1) {
						key = item;
					} else {
						key = item.substr(0, offset);
						value = item.substr(offset + 1);
					}
					if (key != "") {
						result[key] = value;
					}
				}
				StringUtil.trim(header).split(";").forEach(parse, null);
				return result;
			}
			protected function button3_clickHandler(event:MouseEvent):void
			{
			}
			protected function onSocketConnected( event:ConnectionSuccessEvent ):void
			{
				trace(event);
			}
			protected function onSocketDisconnected( event:DisconnectionEvent ):void
			{
				trace(event);
			}
			protected function onIncomingData( event:IncomingDataEvent ):void
			{
				trace(event);
				trace(event.data.toString());
			}
			protected function onOutgoingData( event:OutgoingDataEvent ):void
			{
				trace(event);
				trace(event.data.toString());
			}
			protected function onEvent( event:Event ):void
			{
				trace(event);
			}
			
		]]>
	</fx:Script>
	
	
	<s:Panel width="95%" height="95%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Button id="button1" label="click" click="button1_clickHandler(event)"/>
		<s:Button id="button2" label="xmpp" click="button2_clickHandler(event)"/>
		<s:Button id="button3" label="passport request" click="button3_clickHandler(event)"/>
	</s:Panel>
</s:Application>